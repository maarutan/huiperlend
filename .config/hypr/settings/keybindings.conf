#-----------------------------
# ┬┌─┌─┐┬ ┬┌┐ ┬┌┐┌┌┬┐┬┌┐┌┌─┐┌─┐
# ├┴┐├┤ └┬┘├┴┐││││ │││││││ ┬└─┐
# ┴ ┴└─┘ ┴ └─┘┴┘└┘─┴┘┴┘└┘└─┘└─┘
#-----------------------------
source = ./defApps.conf     #-
#-----------------------------
# (c) maarutan   https://github.com/maarutan

#-----[ Variables ]
$modkey         =      SUPER      # key [ Windows ]
$altkey         =      ALT        # key [ Alt ]
$ctrl           =      CTRL       # key [ Ctrl ]
$shift          =      SHIFT      # key [ Shift ]
$space          =      SPACE      # key [ Space ]
$tab            =      TAB        # key [ Tab ]
$grave          =      GRAVE      # key [ ` ]
$reset          =      hyprctl dispatch submap reset &&                 # reset chords
$delay          =      sleep     2     && hyprctl dispatch submap reset # delay time chords
$opencmd        =      exec, $reset $terminal --hold -e sh -c           # open commandline


#-----[ Alt + Tab ] 
$mod_switch   = alt
$tab_switch   = tab
$grave_switch = grave

bind = $mod_switch, $tab_switch, exec, hyprswitch gui --mod-key $mod_switch --key $tab_switch --close mod-key-release --reverse-key=key=$grave_switch --sort-recent && hyprswitch dispatch
bind = $mod_switch $grave, $tab_switch, exec, hyprswitch gui --mod-key $mod_switch --key $tab_switch --close mod-key-release --reverse-key=key=$grave_switch --sort-recent && hyprswitch dispatch -r


#-----[ system key ]
bind   = $modkey, S, exec,   $delay      # system key [super + S]
bind   = $modkey, S, submap, systemkey   # create submap
submap = systemkey                       # submap start 
#---------------------------------------
bind   = , U, exec, $reset $terminal -e ~/.local/bin/update_system/update.py      # update system
bind   = , T, exec, $reset ~/.local/bin/touchpad/wayland_toggleTouchpad.py        # toggle touchpad
bind   = , L, exec, $reset hyprlock                                               # lock screen
bind   = , P, exec, $reset ~/.local/bin/powermenu/type_1/powermenu.py             # open power menu
bind   = , D, exec, $reset ~/.config/hypr/scripts/dock/dock.py                    # open dock
bind   = , T, exec, $reset ~/.local/bin/wayland_OCRcopy.py                        # OCR copy
bind   = $shift, D, exec, $reset ~/.config/hypr/scripts/dock/dock.py -d           # open dock
bind   = $shift, P, exec, $terminal -e $reset ~/.local/bin/push_dotfiles/start.py # push dotfiles
submap = reset                                                                    # reset chords
#- system
bind   = $modkey, F, fullscreen          # fullscreen 
bind   = $modkey, Q, exec, ~/.config/hypr/scripts/killactive.py          # kill active window

#- rofi 
bind   = $modkey, V, exec, ~/.config/rofi/launchers/clipboard/wayland_clipboard.py # clipboard
bind   = $modkey $altkey, A, exec, ~/.config/rofi/launchers/emoji/emoji.py         # emoji 


#-----[ interface key ]
bind   = $modkey, I, exec,   $delay        # interface key [super + I]
bind   = $modkey, I, submap,  interfacekey # create submap
submap = interfacekey                      # submap start 
#---------------------------------------
bind   = , H, $opencmd "cd ~/.config/hypr/ && exec $SHELL"                       # go to hyprland config
bind   = , S, $opencmd "cd ~/.local/bin/ && exec $SHELL"                         # go to scripts
bind   = , I, $opencmd "cd ~/.config/hypr && nvim hyprland.conf && exec $SHELL"  # go to hyprland config
submap = reset                                                                   # reset chords


#-----[ Application key ]
bind   = $modkey, A, exec,   $delay           # Application key [super + A]
bind   = $modkey, A, submap,  Application     # create submap
submap = Application                          # submap start
bind   = , C, exec, $reset $editor_tui        # open code editor tui
bind   = , V, exec, $reset $editor_gui        # open code editor gui
bind   = , F, exec, $reset $browser           # open browser
#---------------------------------------
submap = reset                                # reset chords
bind = $modkey, E, exec, $fileManager
bind = $modkey, R, exec, $menu
bind = $modkey, Return, exec, $terminal


#-----[ Windows key ]
bind   = $modkey, W, exec,   $delay           # Windows key [super + W]
bind   = $modkey, W, submap,  windows         # create submap
submap = windows                              # submap start
#---------------------------------------
#-----[  wallpapers ]
bind   = , C, exec, $reset ~/.local/bin/wallpapers/logic/choice_type.py                      # choice type
bind   = $shift, T, exec, $reset ~/.local/bin/wallpapers/logic/choice_theme.py               # choice theme
bind   = $shift, C, exec, $reset ~/.local/bin/wallpapers/logic/choice_type_launhcer.py       # choice type launhcer
#-----[  windows ]
bind   = , W,  togglefloating                 # toggle floating windows
bind   = , P,  exec, $screenshot              # screen shots 
bind   = , T,  exec, killall waybar || waybar # toggle waybar
bind   = , R,  exec, killall waybar && waybar # reload waybar
bind   = , B,  exec, $dockbar -t              # toggle dockbar
bind   = $shift, R,  exec, $dockbar -d && $dockbar # reload dockbar
submap = reset                                     # reset chords

bind   = $modkey $shift, W, exec, ~/.local/bin/wallpapers/start.py                           # start wallpapers


#-----[ Magic Workspace ]
bind = $modkey, M, togglespecialworkspace, magic            # toggle magic workspace
bind = $modkey $shift, M, movetoworkspace, special:magic    # move to magic workspace


#-----[ cycle focus ]
bind = $modkey $shift, j, cyclenext           # cycle focus next
bind = $modkey $shift, k, cyclenext, prev     # cycle focus prev

#-----[ Move to windows of stack ]
bindel = $modkey $ctrl, h, movewindow, l        # move to windows of stack left
bindel = $modkey $ctrl, l, movewindow, r        # move to windows of stack right
bindel = $modkey $ctrl, k, movewindow, u        # move to windows of stack up
bindel = $modkey $ctrl, j, movewindow, d        # move to windows of stack down

#-----[ move to floating window ] 
bindel = $modkey, h, moveactive, -50 0          # move to windows of stack left
bindel = $modkey, l, moveactive, 50 0           # move to windows of stack right
bindel = $modkey, k, moveactive, 0 -50          # move to windows of stack up
bindel = $modkey, j, moveactive, 0 50           # move to windows of stack down

#-----[ resize window ]
bindel = $modkey $shift $altkey, h, resizeactive, -22 0         # resize window left
bindel = $modkey $shift $altkey, l, resizeactive, 20 0          # resize window right
bindel = $modkey $shift $altkey, k, resizeactive, 0 -20         # resize window up
bindel = $modkey $shift $altkey, j, resizeactive, 0 20          # resize window down

bindel = $modkey $shift $altkey $ctrl, h, resizeactive, -80 0   # resize window
bindel = $modkey $shift $altkey $ctrl, l, resizeactive, 80 0    # resize window
bindel = $modkey $shift $altkey $ctrl, k, resizeactive, 0 -80   # resize window
bindel = $modkey $shift $altkey $ctrl, j, resizeactive, 0 80    # resize window


#-----[ workspace ]
bind = $modkey $shift, h, workspace, e-1              # go to  one active workspace 
bind = $modkey $shift, l, workspace, e+1              # go to  one active minus workspaceonly 

bind = $modkey $altkey, h, workspace, -1              # go to  one workspace 
bind = $modkey $altkey, l, workspace, +1              # go to  one minus workspaceonly 

bindm = $modkey, mouse:272, movewindow              # go to  one workspace   use mouse
bindm = $modkey, mouse:273, resizewindow            # go to  one minus workspaceonly  use mouse

bind = $modkey $altkey, mouse_down, workspace, +1    # go to  one workspace  
bind = $modkey $altkey, mouse_up, workspace,   -1    # go to  one minus workspace 

bind = $modkey , mouse_down, workspace, e+1          # go to  one workspace  only active
bind = $modkey , mouse_up, workspace, e-1            # go to  one minus workspaceonly active

bind = $modkey $shift $ctrl, h, movetoworkspace, -1  # move to  window in one workspace  
bind = $modkey $shift $ctrl, l, movetoworkspace, +1  # move to  window in one minus workspace

bind = $modkey, 1, workspace, 1                     # default go to workspace 
bind = $modkey, 2, workspace, 2                     # default go to workspace 
bind = $modkey, 3, workspace, 3                     # default go to workspace 
bind = $modkey, 4, workspace, 4                     # default go to workspace 
bind = $modkey, 5, workspace, 5                     # default go to workspace 
bind = $modkey, 6, workspace, 6                     # default go to workspace 
bind = $modkey, 7, workspace, 7                     # default go to workspace 
bind = $modkey, 8, workspace, 8                     # default go to workspace 
bind = $modkey, 9, workspace, 9                     # default go to workspace 
bind = $modkey, 0, workspace, 10                    # default go to workspace 

bind = $modkey $shift, 1, movetoworkspace, 1        # default move to window
bind = $modkey $shift, 2, movetoworkspace, 2        # default move to window
bind = $modkey $shift, 3, movetoworkspace, 3        # default move to window
bind = $modkey $shift, 4, movetoworkspace, 4        # default move to window
bind = $modkey $shift, 5, movetoworkspace, 5        # default move to window
bind = $modkey $shift, 6, movetoworkspace, 6        # default move to window
bind = $modkey $shift, 7, movetoworkspace, 7        # default move to window
bind = $modkey $shift, 8, movetoworkspace, 8        # default move to window
bind = $modkey $shift, 9, movetoworkspace, 9        # default move to windo
bind = $modkey $shift, 0, movetoworkspace, 10       # default move to window

bind = $modkey, P, pseudo, # dwindle
bind = $modkey, N, togglesplit, # dwindle


#-----[ keyboard switch ]
# bind  = $modkey, $space, exec, ~/.local/bin/keyboard/hypr_keyboardswitch.py      # how to Windows
# bind  = $altkey, $shift_l, exec, ~/.local/bin/keyboard/hypr_keyboardswitch.py    # how to Windows
bind  = $ctrl  ,  $altkey_l, exec, ~/.local/bin/keyboard/hypr_keyboardswitch.py    # how to maaru 
# bindr = CAPS, Caps_Lock, exec, ~/.local/bin/keyboard/hypr_keyboardswitch.py      # how to mac if   # kb_options = :nocaps

#-----[ volume multimedia ]
bindel = ,XF86AudioRaiseVolume, exec, ~/.local/bin/volume/volume.py up    # volume up 
bindel = ,XF86AudioLowerVolume, exec, ~/.local/bin/volume/volume.py down  # volume down
bindel = ,XF86AudioMute, exec,  ~/.local/bin/volume/volume.py mute        # volume mute
bindel = ,XF86AudioMicMute, exec, ~/.local/bin/volume/volume.py mic       # microphone mute

#-----[ brightness multimedia ]
bindel = ,XF86MonBrightnessUp, exec, ~/.local/bin/brightness/brightness_control.py up      # brightness up
bindel = ,XF86MonBrightnessDown, exec, ~/.local/bin/brightness/brightness_control.py down  # brightness down
 
#-----[ Requires playerctl multimedia ]
bindl = , XF86AudioNext, exec, playerctl next        # player next
bindl = , XF86AudioPause, exec, playerctl play-pause # player pause
bindl = , XF86AudioPlay, exec, playerctl play-pause  # player play
bindl = , XF86AudioPrev, exec, playerctl previous    # player previous


#-----[ Volume control ]
bindel = $modkey, bracketleft, exec, ~/.local/bin/volume/volume.py up          # volume up
bindel = $modkey, bracketright, exec, ~/.local/bin/volume/volume.py down       # volume down
bindel = $modkey, backslash, exec, ~/.local/bin/volume/volume.py mute          # volume down
bindel = $modkey $shift, backslash, exec, ~/.local/bin/volume/volume.py mic    # volume down

#-----[ Brightness control ]
bindel = $modkey $shift, bracketleft, exec, ~/.local/bin/brightness/brightness_control.py up     # volume up
bindel = $modkey $shift, bracketright, exec, ~/.local/bin/brightness/brightness_control.py down  # volume down

#-----[  exit ]
bind = $modkey $altkey, Q, exit   #---===[ Exit Hyprland ]===---
